{"version":3,"file":"docsify-example-panels.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/js/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Dependencies\n// =============================================================================\nimport { version as pkgVersion } from '../../package.json';\nimport '../scss/style.scss';\n\n\n// Constants and variables\n// =============================================================================\nconst commentReplaceMark = 'panels:replace';\n\nconst classNames = {\n    panelWrapper      : 'docsify-example-panels',\n    panelContainer      : 'docsify-example-panel'\n};\nconst regex = {\n    // Matches markdown code blocks (inline and multi-line)\n    // Example: ```text```\n    codeMarkup: /(```*?```)/gm,\n\n    // Matches replacement comments\n    // 0: Match\n    // 1: Replacement HTML\n    commentReplaceMarkup: new RegExp(`<!-- ${commentReplaceMark} (.*) -->`),\n    // Matches panels set by start/end comment\n    // 0: Match\n    // 1: Indent\n    // 2: Start comment: <!-- panels:start -->\n    // 3: divs and content\n    // 4: End comment: <!-- panels:end -->\n    panelWrapperMarkup: /[\\r\\n]*(\\s*)(<!-+\\s+panels:\\s*?start\\s+-+>)[\\r\\n]+([\\s|\\S]*?)[\\r\\n\\s]+(<!-+\\s+panels:\\s*?end\\s+-+>)/m,\n\n    // Matches divs and content\n    // 0: Match\n    // 1: Label: <!-- div:class -->\n    // 2: Content\n    panelMarkup: /<!-+\\s+div:\\s*(.*)\\s+-+>[\\r\\n]+([\\s\\S]*?)[\\r\\n]+((?=<!-+\\s+div:?)|(?=<!-+\\s+panels?))/m,\n};\n\n\n// Functions\n// =============================================================================\n/**\n * Converts tab content into \"stage 1\" markup. Stage 1 markup contains temporary\n * comments which are replaced with HTML during Stage 2. This approach allows\n * all markdown to be converted to HTML before tab-specific HTML is added.\n *\n * @param {string} content\n * @returns {string}\n */\nfunction renderPanelsStage1(content) {\n    const codeBlockMatch   = content.match(regex.codeMarkup) || [];\n    const codeBlockMarkers = codeBlockMatch.map((item, i) => {\n        const codeMarker = `<!-- ${commentReplaceMark} CODEBLOCK${i} -->`;\n\n        // Replace code block with marker to ensure tab markup within code\n        // blocks is not processed. These markers are replaced with their\n        // associated code blocs after tabs have been processed.\n        content = content.replace(item, codeMarker);\n\n        return codeMarker;\n    });\n\n    let panelWrapperMatch; // eslint-disable-line no-unused-vars\n    let panelMatch; // eslint-disable-line no-unused-vars\n\n    // Process each tab set\n    while ((panelWrapperMatch = regex.panelWrapperMarkup.exec(content)) !== null) {\n        let panelWrapper            = panelWrapperMatch[0];\n        let panelStartReplacement = '';\n        let panelEndReplacement   = '';\n\n        const hasPanel = regex.panelMarkup.test(panelWrapper);\n        const panelWrapperIndent = panelWrapperMatch[1];\n        const panelWrapperStart  = panelWrapperMatch[2];\n        const panelWrapperEnd    = panelWrapperMatch[4];\n\n        if (hasPanel) {\n            panelStartReplacement = `<!-- ${commentReplaceMark} <div class=\"${[classNames.panelWrapper].join(' ')}\"> -->`;\n            panelEndReplacement = `\\n${panelWrapperIndent}<!-- ${commentReplaceMark} </div> -->`;\n\n            // Process each panel\n            while ((panelMatch = (regex.panelMarkup.exec(panelWrapper))) !== null) {\n                const panelName   = (panelMatch[1]).trim().toLowerCase();\n                const panelContent = (panelMatch[2]).trim();\n\n                panelWrapper = panelWrapper.replace(panelMatch[0], [\n                    `\\n${panelWrapperIndent}<!-- ${commentReplaceMark} <div class=\"${[classNames.panelContainer, panelName].join(' ')}\"> -->`,\n                    `\\n\\n${panelWrapperIndent}${panelContent}`,\n                    `\\n\\n${panelWrapperIndent}<!-- ${commentReplaceMark} </div> -->`\n                ].join(''));\n            }\n\n        }\n\n        panelWrapper = panelWrapper.replace(panelWrapperStart, panelStartReplacement);\n        panelWrapper = panelWrapper.replace(panelWrapperEnd, panelEndReplacement);\n        content = content.replace(panelWrapperMatch[0], panelWrapper);\n    }\n\n\n    // Restore code blocks\n    codeBlockMarkers.forEach((item, i) => {\n        content = content.replace(item, codeBlockMatch[i]);\n    });\n\n    return content;\n}\n\n/**\n * Converts \"stage 1\" markup into final markup by replacing temporary comments\n * with HTML.\n *\n * @param {string} html\n * @returns {string}\n*/\nfunction renderPanelsStage2(html) {\n    let tabReplaceMatch; // eslint-disable-line no-unused-vars\n\n    while ((tabReplaceMatch = regex.commentReplaceMarkup.exec(html)) !== null) {\n        const tabComment     = tabReplaceMatch[0];\n        const tabReplacement = tabReplaceMatch[1] || '';\n\n        html = html.replace(tabComment, tabReplacement);\n    }\n\n    return html;\n}\n\n\n\n\n// Plugin\n// =============================================================================\nfunction docsifyPanels(hook, vm) {\n    let hasPanels =false;\n    hook.beforeEach(function(content) {\n        hasPanels = regex.panelWrapperMarkup.test(content);\n\n        if (hasPanels) {\n            content = renderPanelsStage1(content);\n        }\n\n        return content;\n    });\n\n    hook.afterEach(function(html, next) {\n        if (hasPanels) {\n            html = renderPanelsStage2(html);\n        }\n\n        next(html);\n    });\n}\n\n\nif (window) {\n    window.$docsify = window.$docsify || {};\n\n    // Add config object\n    window.$docsify.panels = window.$docsify.panels || {};\n\n    // Add plugin data\n    window.$docsify.panels.version = pkgVersion;\n\n    // Init plugin\n    window.$docsify.plugins = [].concat(\n        docsifyPanels,\n        (window.$docsify.plugins || [])\n    );\n}\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","commentReplaceMark","classNames","panelWrapper","panelContainer","regex","codeMarkup","commentReplaceMarkup","RegExp","panelWrapperMarkup","panelMarkup","renderPanelsStage1","content","codeBlockMatch","match","codeBlockMarkers","map","item","i","codeMarker","replace","panelWrapperMatch","panelMatch","exec","panelStartReplacement","panelEndReplacement","hasPanel","test","panelWrapperIndent","panelWrapperStart","panelWrapperEnd","join","panelName","trim","toLowerCase","panelContent","forEach","renderPanelsStage2","html","tabReplaceMatch","tabComment","tabReplacement","docsifyPanels","hook","vm","hasPanels","beforeEach","afterEach","next","window","$docsify","panels","version","pkgVersion","plugins","concat"],"mappings":"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"}